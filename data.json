[
   {
      "title":"prek",
      "content":"ls -al .ssh/\ncat >.ssh/id_ed25519\nchmod 600 .ssh/id_ed25519\nssh -T git@bitbucket.org",
      "date":"2023-08-15",
      "tags":[
         "tag1",
         "tag2"
      ]
   },
   {
      "title":"Note 2",
      "content":"-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACDGfmjmGpsU5HcrU99/2LgeYNEio6+9z5kudaJTkoKcDwAAAKCyn2URsp9l\nEQAAAAtzc2gtZWQyNTUxOQAAACDGfmjmGpsU5HcrU99/2LgeYNEio6+9z5kudaJTkoKcDw\nAAAECRFFARMhYba5aGc/T2t6HsXtWAQaWVTBchMYmsF2ZED8Z+aOYamxTkdytT33/YuB5g\n0SKjr73PmS51olOSgpwPAAAAF25vbmVAbm9uZS1Bc3BpcmUtRTUtNTc1AQIDBAUG\n-----END OPENSSH PRIVATE KEY-----\n",
      "date":"2023-08-14",
      "tags":[
         "tag2",
         "tag3"
      ]
   },
   {
      "title":"Notex",
      "content":"tag_setup\nsetup \ntags used \n@@ pure res\n@ res with appr /apprres\n \nremote new : git remote add origin git@bitbucket.org:slugemi/blank.git\n\nseprate \nscripts \n.gitignore *\n\ngitproneeded\n\n\n\ned25519 privkey\n\ncat ~/.ssh/id_ed25519\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACDGfmjmGpsU5HcrU99/2LgeYNEio6+9z5kudaJTkoKcDwAAAKCyn2URsp9l\nEQAAAAtzc2gtZWQyNTUxOQAAACDGfmjmGpsU5HcrU99/2LgeYNEio6+9z5kudaJTkoKcDw\nAAAECRFFARMhYba5aGc/T2t6HsXtWAQaWVTBchMYmsF2ZED8Z+aOYamxTkdytT33/YuB5g\n0SKjr73PmS51olOSgpwPAAAAF25vbmVAbm9uZS1Bc3BpcmUtRTUtNTc1AQIDBAUG\n-----END OPENSSH PRIVATE KEY-----\n\n\npermission of .ssh and files id_ed25519 id_ed25519.pub\n-rw------- 1 none none 419 Oct  7 18:27 /home/none/.ssh/id_ed25519\n-rw-r--r-- 1 none none 105 Oct  7 18:27 /home/none/.ssh/id_ed25519.pub\n\n\n#test \nssh -T git@bitbucket.org\n\n\n@guru99LinuxReactJs \n@fireshipHtmlCssJsReact\n@ytReactunderXmin\n@ytVim31commands\n\njsondb Up tag :setup \nsubl install  vim setup \n\ncopyQ install \n\nxdm install  with extension setup\n\nubuntu 23.04 setup rufus uefi gpt fat32 \n\n###########db remote #############\njsondb \nbefore that st flaw in learning imp etc appr in space of developementt etc is vitality cuck \ntask \nremove this b\nhttps://bitbucket.org/slugemi/blankr/src/Oct01test/\ngit clone -b Oct01test git@bitbucket.org:slugemi/blankr.git\n\n\n\n\n\n\n\nhiddendb=\nfrom bitbucket private repo to github pages \npagex  new repo  with auto pointer for typing \n\ngit clone -b Sep27-jsondb git@bitbucket.org:slugemi/blankr.git\nsudo rm -r .git\n\n\n\n###tag_ty58\nAppr/rules \n\n\n\n\nty58 \nhttps://www.typing.com/student/typing-test/1-minute\n\nhttps://www.typing.com/student/typing-test/5-minute\n\nmanual rules for everymongolian\ndont panic to dont panic should be asurnces in mind slip writing /rehan fast is also panic \n\nfirst controlled then auto with far scope usage if accuracy is effected for spped go back to controlled \n\n\n\n###tag_vimpro\n@31cmds+impKeyup\n\n#entry appr \nno need to be pervfect and concise as possible documetation in begning commits \n\n\\commitone\n\n31cmds \\all with respect to cursor ||cursor is key and in ecs command mode to perform these \nG   go_last_line\ngg  go_first_line\nguu convert_line_lowercase\ngUU convert_line_uppercase\nD   delete_to_end_of_line\ndd  delete_lines_x=1_times\n3dd delete_lines_x=3_times\ndiw delete_word_under_cursor\nR   replace_mode + ecs\nyy  copy_x=1_lines\n5yy copy_x=5_lines\n:x  goto_line_x\np   paste_after_cursor\nP   paste_before_the_cursor\nfc  go_forward_to_c=anycharacter\ndw  del_from_cursor_to_end_of_word\nw   go_forward_to_next_word\nF   go_backward_to_any_occurace_eg_spaceKey_character_etc\n^   go_to_first_non_black_character_of_line\n0   go_to_first_char_in_line\n$   go_to_last_character_in_line\nx   del_char_under_cursor\n+   go_to_beginning_of_next_line\n%   go_to_maching_bracket_eg{\nu   undo\nCtrl+R  redo\n\n\ntags :\nnormal mode , visual block(indent multiple lines etc by use of j for highligting x lines insert mode by Shift + i or a ?oai make change indent or otherwise ecs to appy to  visual block highlighted   ) , command mode(make change to view using = set number etc vim commands or pre ! linux commands, replace function with function :%s/func/func/g ,g for each occurace global  )\n\n#VISUALBLOCKIMP\n\nls ~/.ssh\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nxclip -sel clip < ~/.ssh/id_rsa.pub\ncat ~/.ssh/id_rsa.pub | xclip -sel clip .\nssh -T git@bitbucket.org\n\n\n\nssh-keygen -t rsa -b 4096 -C \"bitbpkey\"  -f /path/to/your/directory/id_rsa\nxclip -sel clip < ~/.ssh/id_rsa.pub || cat ~/.ssh/id_rsa.pub | xclip -sel clip .\n\n\nssh -v -i ./pkey -T bit@bitbucket.org |cat >pkey.log\n\n?& vs && @linux.txt\n\\ssh-keygen -t rsa -b 4096 -C \"bitbpkey\"  -f /path/to/your/directory/id_rsa\n\n\n\nhttps://support.atlassian.com/bitbucket-cloud/docs/configure-ssh-and-two-step-verification/\nssh-keygen -t rsa -b 4096 -C \"pkey\" -f /path/to/your/directory/id_rsa\ncat ~/.ssh/id_rsa.pub | xclip -sel clip .\nThe permission values are:\n\n    4 for read permission\n    2 for write permission\n    1 for execute permission\n\nssh -v -i ./pkey -T bit@bitbucket.org >pkey.log\n\n\nhttps://raw.githubusercontent.com/2023emi/tmuxapg/main/2023/misc*/schema.txt\n\n\n{\n    \"title\": \"Note 1\",\n    \"content\": \"This is the content of Note 1.\",\n    \"date\": \"2023-08-15\",\n    \"tags\": [\"tag1\", \"tag2\"]\n  },\n  {\n    \"title\": \"Note 2\",\n    \"content\": \"This is the content of Note 2.\",\n    \"date\": \"2023-08-14\",\n    \"tags\": [\"tag2\", \"tag3\"]\n  }\n]\n\n\ncurl https://<your-username>.github.io/<repository-name>/data.json\n\n\nINPUT DATA INTO CONTENT KEY FORMATTED FORM USING VIM  \nusing single line text string \nAOI prompt for wrong key value = JSON object => \n\nhow toputt this in json key value ,\n  {\n    \"title\": \"Git\",\n    \"content\": \"or create a new repository on the command line\n\necho \"# jsondb\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/2023emi/jsondb.git\ngit push -u origin main\",\n    \"date\": \"2023-08-12\",\n    \"tags\": [\"tag2\", \"tag4\"]\n  }\n\nOUTPUT\n{\n    \"title\": \"Git\",\n    \"content\": \"or create a new repository on the command line\n\necho \"# jsondb\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/2023emi/jsondb.git\ngit push -u origin main\",\n    \"date\": \"2023-08-12\",\n    \"tags\": [\"tag2\", \"tag4\"]\n  }\n\n\nThe backslashes (\\) are used to escape characters that have special meanings in JSON.\n\n    \\n is the escape sequence for a new line.\n    \" is used to include a double quote within the string.\n\nVIM HAKX TO ADD \n AT THE END OF EACH LINE FOR FORAMTTING PKEY\n        Open the JSON file in Vim:\n\nVIM your_file.json\n\n    Use Visual Block Mode:\n\n    a. Press Ctrl + V to enter visual block mode.\n    b. Use the j keystroke to select the lines you want to modify.\n\n    Add \",\n \" + to the end of each selected line:\n\n    a. Press $ to move the cursor to the end of the selected block.\n    b. Type Shift + A (capital \"A\"), then type \",\n\" + and then press Esc. This will append \",\n\" + to the end of each selected line.\n\n    Save the changes and exit Vim:\n\nPress Esc to ensure you're in normal mode, then type :wq and press Enter.\n\nUsing Shift + A after selecting the block allows you to append text to the end of each line in the selected block.\n\nTo collapse multiple lines into a single line in Vim, you can use the \"join\" command. Here's how you can do it:\n\n\njoin! \ncommnad \n\nthen to rev yank\n:%s/\\\\n/\\r/g\n\n\n\n\n\n\n\n\n\n\n\nTAG_GITPRO\n\n\n\n\nTAG_TMUXPRO\n\n\n\n\nTAG_LINUXPRO\n@guru99\n",
      "date":"2023-08-15",
      "tags":[
         "tag1",
         "tag2"
      ]
   }
]